=== Refactored JsonToObjectGenerator Test Results ===

1. Testing List<Employee> (Refactored Version):
============================================================
List<Employee> employeesCollection = new ArrayList<>();
Employee employee = new Employee();
employee.setName("John");
employee.setAge(30);

employeesCollection.add(employee);
Employee employee1 = new Employee();
employee1.setName("Jane");
employee1.setAge(25);

employeesCollection.add(employee1);

Company company = new Company();
company.setName("Company");
company.setEmployees(employeesCollection);

2. Testing All Collection Types (Refactored Version):
============================================================
List<Employee> employeesCollection = new ArrayList<>();
Employee employee = new Employee();
employee.setName("Alice");
employee.setAge(28);

employeesCollection.add(employee);
Employee employee1 = new Employee();
employee1.setName("Bob");
employee1.setAge(32);

employeesCollection.add(employee1);
Employee employee2 = new Employee();
employee2.setName("Charlie");
employee2.setAge(26);

employeesCollection.add(employee2);

Collection<String> skillsCollection = new ArrayList<>();
skillsCollection.add("Java");
skillsCollection.add("Python");
skillsCollection.add("JavaScript");
skillsCollection.add("React");
skillsCollection.add("Spring Boot");

Collection<String> tasksCollection = new ArrayList<>();
tasksCollection.offer("Code Review");
tasksCollection.offer("Bug Fixing");
tasksCollection.offer("Feature Development");
tasksCollection.offer("Testing");

Deque<String> prioritiesCollection = new ArrayList<>();
prioritiesCollection.add("High");
prioritiesCollection.add("Medium");
prioritiesCollection.add("Low");
prioritiesCollection.add("Critical");

Collection<String> resourcesCollection = new ArrayList<>();
resourcesCollection.add("Laptop");
resourcesCollection.add("Monitor");
resourcesCollection.add("IDE License");
resourcesCollection.add("Cloud Access");

Department department = new Department();
department.setName("Engineering Department");
department.setEmployees(employeesCollection);
department.setSkills(skillsCollection);
department.setTasks(tasksCollection);
department.setPriorities(prioritiesCollection);
department.setResources(resourcesCollection);

3. Testing Composite Design Pattern (Refactored Version):
============================================================
TreeNode treenode2 = new TreeNode();
treenode2.setName("Left-Left Child");

TreeNode treenode3 = new TreeNode();
treenode3.setName("Left-Right Child");

TreeNode treenode1 = new TreeNode();
treenode1.setName("Left Child");
treenode1.setLeftChild(treenode2);
treenode1.setRightChild(treenode3);

TreeNode treenode4 = new TreeNode();
treenode4.setName("Right Child");

TreeNode treenode = new TreeNode();
treenode.setName("Root Node");
treenode.setLeftChild(treenode1);
treenode.setRightChild(treenode4);

4. Testing Simple Nested Object (Refactored Version):
============================================================
B b = new B();
b.setX(10);

A a = new A();
a.setA("Krishna");
a.setB(b);

